#include<iostream>

using namespace std;

class IntSLLNode
{

public:

	IntSLLNode() {
 next=0;
 }

	IntSLLNode(int el, IntSLLNode *ptr=0)
	{
 info=el; next=ptr;
 }

	int info;

	IntSLLNode *next;

};


class IntSLList
{

public:

	IntSLList() {
 head = tail = 0;
 }

	int isEmpty() {
	return head == 0;
 }

	void addToHead(int);

	void addToTail(int);

	int deleteFromHead();

	int deleteFromTail();

	void deleteNode(int);

	bool isInList(int) const;

	void printSLList();

	void maiormenor(IntSLList &lista);

private:

	IntSLLNode *head, *tail;

};

void IntSLList::addToHead(int el) {

	head = new IntSLLNode(el,head);
	if(tail == 0)

		tail = head;

}

void IntSLList::addToTail(int el) {

	if(tail!=0) {

		tail->next = new IntSLLNode(el);

		tail = tail->next;

	}
	else head = tail = new IntSLLNode(el);

}

int IntSLList::deleteFromHead() {

	int el = head->info;

	IntSLLNode *tmp = head;

	if (head == tail)

		head = tail = 0;

	else head = head->next;

	delete tmp;

	return el;

}

int IntSLList::deleteFromTail() {

	int el= tail->info;

	if (head==tail) { // if only one node in the list;

		delete head;

		head= tail = 0;

	}
	else {			// if more than one node in the list;

		IntSLLNode *tmp;

		for (tmp = head; tmp->next != tail; tmp = tmp->next);

		delete tail;

		tail = tmp;

		tail->next = 0;

	}
	return el;

}

void IntSLList::printSLList()
{

	IntSLLNode *p=head;

	while(p!=NULL)
	{

		cout<<"\n\np->info="<<p->info;

		p=p->next;

	}

}

void IntSLList::maiormenor(IntSLList &lista)
{
    IntSLLNode *tmp=head;
    int maior=tmp->info;
    int menor=tmp->info;
    if(head!=NULL)
    {
        for(tmp;tmp!=NULL;tmp=tmp->next)
        {
            if(tmp->info>maior){ maior=tmp->info; }
            if(tmp->info<menor){ menor=tmp->info; }
        }
    }
    cout << "\nMaior: " << maior;
    cout << "\nMenor: " << menor;
}

int main()
{

	IntSLList lista;
    	lista.addToHead(1);
	lista.addToHead(2);
    	lista.addToHead(3);
	lista.addToHead(4);
    	lista.addToHead(5);
	lista.addToTail(6);
    	lista.addToHead(7);
	lista.addToHead(8);
	lista.printSLList();
	lista.maiormenor(lista);

}



